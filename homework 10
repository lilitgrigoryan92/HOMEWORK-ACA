//TASK1
/* Create a function that takes a number as an argument. Add up all the numbers from 1 to the number you passed to the function. For example, if the input is 4 then your function should return 10 because 1 + 2 + 3 + 4 = 10.

addUp(4) ➞ 10

addUp(13) ➞ 91

addUp(600) ➞ 180300 */

//1

/* function addUp(num) {

let sum = 0
  for (let i = 1; i <= num; i++) {

    sum += i
  }
  return sum
}
console.log(addUp(600)) */


//2
//RECURSIA

/* function addUp(num){
if(num===0){
return num
}
return num+addUp(num-1)

}

console.log(addUp(600)) */

//TASK2
/* A value is omnipresent if it exists in every subarray inside the main array.
To illustrate:

[[3, 4], [8, 3, 2], [3], [9, 3], [5, 3], [4, 3]]
// 3 exists in every element inside this array, so is omnipresent.

Create a function that determines whether an input value is omnipresent for a given array.

Examples
isOmnipresent([[1, 1], [1, 3], [5, 1], [6, 1]], 1) ➞ true
isOmnipresent([[1, 1], [1, 3], [5, 1], [6, 1]], 6) ➞ false
isOmnipresent([[5], [5], [5], [6, 5]], 5) ➞ true
isOmnipresent([[5], [5], [5], [6, 5]], 6) ➞ false */

//1
/* function isOmnipresent(arr,num){
for(let i=0;i<arr.length;i++){
for(let j=0;j<arr.length;j++){
if(num===arr[i][j]){
return true
}
return false
}
}

}
console.log(isOmnipresent([[1, 1], [1, 3], [5, 1], [6, 1]], 3))
 */
 
 
 //2
/*  function isOmnipresent(arr, val) {
  for (let i = 0; i < arr.length; i++) {
    let subarray = arr[i];
    let found = false;
    
    for (let j = 0; j < subarray.length; j++) {
      if (subarray[j] === val) {
        found = true;
        break;
      }
    }
    
    if (!found) {
      return false;
    }
  }
    return true;
 }
 const arr1 = [[1, 1], [1, 3], [5, 1], [6, 1]];
 const value1 = 4
 console.log(isOmnipresent(arr1, value1));  */



//TASK3
/* Create a function that takes an array of numbers between 1 and 10 (excluding one number) and returns the missing number.
Try to use one of sorting or searching algorithms
Examples
missingNum([1, 2, 3, 4, 6, 7, 8, 9, 10]) ➞ 5
missingNum([7, 2, 3, 6, 5, 9, 1, 4, 8]) ➞ 10
missingNum([10, 5, 1, 2, 4, 6, 8, 3, 9]) ➞ 7 */


//1
/* function missingNum(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] !== i + 1) {
      return i + 1;
    }
  }
  return arr
}

console.log(missingNum([10,5, 2, 3, 4, 6, 7, 8, 9, 1]));  */

//2
/* function missingNum(arr) {
  arr.sort(function(a, b) {
    return a - b;
  });

  for (let i = 0; i < arr.length; i++) {
    if (arr[i] !== i + 1) {
      return i + 1;
    }
  }

  return -1;
}

console.log(missingNum([10, 2, 3, 4, 6, 7, 8, 9, 1])); 
 */
 
//TASK4
/* Create a function that converts a string of letters to their respective number in the alphabet.

A	B	C	D	E	F	G	H	I	J	K	L	M	N	O	P	Q	R	S	T	U	V	W	...
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	...

Examples
alphNum("XYZ") ➞ "23 24 25"
alphNum("ABCDEF") ➞ "0 1 2 3 4 5"
alphNum("JAVASCRIPT") ➞ "9 0 21 0 18 2 17 8 15 19"

Notes
Make sure the numbers are spaced.
All letters will be UPPERCASE. */

//1
/* 
 function alphNum(str){
let result=""  
str=str.toUpperCase()
for(let i=0;i<str.length;i++){
    const charCode = str.charCodeAt(i);
    let num=charCode-65
result+=num+" "
}
return result
}

console.log(alphNum("XYZ"))  */


//2
/* function alphNum(str) {
  const result = [];

  for (let i = 0; i < str.length; i++) {
    const charCode = str.charCodeAt(i);

    if (charCode >= 65 && charCode <= 90) {
       
      const num = charCode - 65;
      result.push(num);
    }
    else if (charCode >= 97 && charCode <= 122) {
    
      const num = charCode - 97;
      result.push(num);
    } 
  }

  return result.join(' ');
}

console.log(alphNum("XYZ")) */
